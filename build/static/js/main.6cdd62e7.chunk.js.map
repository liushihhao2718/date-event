{"version":3,"sources":["Infos.js","App.js","serviceWorker.js","index.js"],"names":["addInfo","info","a","fetch","method","headers","body","JSON","stringify","then","x","json","App","useState","infos","setInfos","show","modalType","data","undefined","modalState","setModalState","useEffect","Header","Container","className","ListCards","onClick","MatchModals","handleClose","AddButton","onSubmit","event","sendAddInfo","props","Navbar","bg","variant","Brand","href","Nav","Link","preventDefault","Info","Object","fromEntries","Array","from","target","elements","filter","id","map","split","value","CardColumns","style","fontSize","Card","key","Img","src","Body","Title","principal","Text","description","InfoModal","AddInfoModal","location","link","Modal","onHide","size","aria-labelledby","centered","closeButton","ListGroup","Item","alt","marginRight","fontWeight","rel","Form","Group","controlId","Label","Control","type","placeholder","as","rows","Button","position","right","bottom","display","placeItems","width","height","borderRadius","padding","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAeO,SAAeA,EAAtB,kC,4CAAO,WAAuBC,GAAvB,SAAAC,EAAA,sEACUC,MAAM,SAAU,CACzBC,OAAO,OACPC,QAAQ,CACJ,eAAgB,mCAEpBC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAPV,oF,kGCoCQC,EAhCH,WAAM,MAESC,mBAAS,IAFlB,mBAEVC,EAFU,KAEHC,EAFG,OAGmBF,mBAAS,CAC5CG,MAAM,EACNC,UAAW,GACXC,UAAMC,IANU,mBAGVC,EAHU,KAGEC,EAHF,KAcjB,OALAC,qBAAU,WACTnB,MAAM,UACJM,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACC,GAAD,OAAOK,EAASL,QACrB,IAEF,oCACC,kBAACa,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,UAAU,QACpB,kBAACC,EAAD,CACCZ,MAAOA,EACPa,QAAS,SAAC1B,GACToB,EAAc,CAAEL,MAAM,EAAMC,UAAW,WAAYC,KAAMjB,QAI5D,kBAAC2B,EAAD,CAAaR,WAAYA,EAAYS,YAjBnB,kBAAMR,EAAc,CAAEL,MAAM,OAkB9C,kBAACc,EAAD,CAAWH,QAAS,kBAAMN,EAAc,CACnCL,MAAM,EAAMC,UAAW,UAAWc,SAAU,SAACC,I,sCAASC,CAAYD,EAAOX,WAQjF,SAASE,EAAOW,GACd,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACC,EAAA,EAAD,CAAKf,UAAU,WACb,kBAACe,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,UACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,UAAf,gBACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,WAAf,sBACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,cAAf,wB,4CAMR,WAA2BP,EAAOX,GAAlC,SAAAnB,EAAA,sDACE8B,EAAMU,iBAENC,EADgBC,OAAOC,YAAYC,MAAMC,KAAKf,EAAMgB,OAAOC,UAAUC,QAAO,SAAAxC,GAAC,OAAEA,EAAEyC,MAAIC,KAAI,SAAA1C,GAAC,MAAE,CAACA,EAAEyC,GAAGE,MAAM,KAAK,GAAI3C,EAAE4C,YAC7F7C,MAAK,SAAAC,GACzBW,EAAc,CAACL,MAAK,OAJxB,4C,sBASA,SAASU,EAAUQ,GAAQ,IAClBpB,EAAmBoB,EAAnBpB,MAAOa,EAAYO,EAAZP,QAEf,OACC,kBAAC4B,EAAA,EAAD,CAAaC,MAAO,CAACC,SAAU,SAC7B3C,EAAMsC,KAAI,SAACnD,GACX,OACC,kBAACyD,EAAA,EAAD,CACCC,IAAK1D,EAAKkD,GACVxB,QAAS,WACRA,EAAQ1B,KAGT,kBAACyD,EAAA,EAAKE,IAAN,CACCvB,QAAQ,MACRwB,IAAI,0CAEL,kBAACH,EAAA,EAAKI,KAAN,KACC,kBAACJ,EAAA,EAAKK,MAAN,KAAa9D,EAAK+D,WAClB,kBAACN,EAAA,EAAKO,KAAN,KAAYhE,EAAKiE,mBASxB,SAAStC,EAAYM,GAAQ,IACpBd,EAA4Bc,EAA5Bd,WAAYS,EAAgBK,EAAhBL,YACpB,OAAQT,EAAWH,WAClB,IAAK,WACJ,OAAO,kBAACkD,EAAD,CAAWlE,KAAMmB,EAAWF,KAAMW,YAAaA,IACvD,IAAK,UACD,OAAO,kBAACuC,EAAD,CAAcvC,YAAaA,EAAaE,SAAUX,EAAWW,WAExE,QACC,OAAO,sCAIV,SAASoC,EAAUjC,GAAQ,IAClBjC,EAAsBiC,EAAtBjC,KAAM4B,EAAgBK,EAAhBL,YACNmC,EAA2C/D,EAA3C+D,UAAWE,EAAgCjE,EAAhCiE,YAAaG,EAAmBpE,EAAnBoE,SAAUC,EAASrE,EAATqE,KAC1C,OACC,kBAACC,EAAA,EAAD,CACCvD,MAAM,EACNwD,OAAQ3C,EACRJ,UAAU,OACVgD,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,GAER,kBAACJ,EAAA,EAAMhD,OAAP,CAAcqD,aAAW,GACxB,kBAACL,EAAA,EAAMR,MAAP,KAAcC,IAEf,kBAACO,EAAA,EAAMT,KAAP,KACC,kBAACe,EAAA,EAAD,CAAWxC,QAAQ,SAClB,kBAACwC,EAAA,EAAUC,KAAX,KACC,yBACCrD,UAAU,QACVoC,IAAI,wCACJkB,IAAI,MAGN,kBAACF,EAAA,EAAUC,KAAX,KACK,yBAAKrD,UAAU,eACX,2BAAO+B,MAAO,CAACwB,YAAa,OAAOC,WAAW,SAA9C,gBACA,6BAAMf,KAGdG,EAAW,kBAACQ,EAAA,EAAUC,KAAX,KAEL,yBAAKrD,UAAU,eACb,2BAAO+B,MAAO,CAACwB,YAAa,OAAOC,WAAW,SAA9C,gBACA,6BAAMZ,KAIY,qCAC3B,kBAACQ,EAAA,EAAUC,KAAX,KACC,uBAAGvC,KAAM+B,EAAMtB,OAAO,SAASkC,IAAI,uBAClC,kBAAC,IAAD,MADD,YAWN,SAASd,EAAalC,GAAQ,IACpBL,EAA0BK,EAA1BL,YAAaE,EAAaG,EAAbH,SAEtB,OACC,kBAACwC,EAAA,EAAD,CACCvD,MAAM,EACNwD,OAAQ3C,EACRJ,UAAU,OACVgD,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,GAER,kBAACJ,EAAA,EAAMhD,OAAP,CAAcqD,aAAW,GACxB,kBAACL,EAAA,EAAMR,MAAP,kCAED,kBAACQ,EAAA,EAAMT,KAAP,KACC,kBAACqB,EAAA,EAAD,CAAMpD,SAAUA,GACf,kBAACoD,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACrB,kBAACF,EAAA,EAAKG,MAAN,wCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,iFAEvC,kBAACN,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACrB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,GAAG,UAChB,4BAAQpC,MAAM,QAAd,UACA,4BAAQA,MAAM,SAAd,gBACA,4BAAQA,MAAM,UAAd,sBACA,4BAAQA,MAAM,aAAd,wBAGG,kBAAC6B,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBAC1B,kBAACF,EAAA,EAAKG,MAAN,iCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,4BAEvC,kBAACN,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBACrB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,GAAG,WAAWC,KAAK,OAE7B,yBAAKlE,UAAU,UACf,kBAACmE,EAAA,EAAD,CAAQvD,QAAQ,UAAUmD,KAAK,SAAS/D,UAAU,WAAlD,cAWV,SAASK,EAAUI,GAAQ,IAClBP,EAAYO,EAAZP,QACR,OACC,kBAACiE,EAAA,EAAD,CACCjE,QAASA,EACTF,UAAU,SACV+B,MAAO,CACNqC,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,WAAY,SACZC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,QAAS,oBAGV,kBAAC,IAAD,CAAW5B,KAAM,MCjOA6B,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cdd62e7.chunk.js","sourcesContent":["/**\r\n * @typedef Info \r\n * @property {number} id \r\n * @property {string} type \r\n * @property {string} principal \r\n * @property {string} location \r\n * @property {string} link \r\n * @property {string} description \r\n**/\r\n\r\n\r\n/**\r\n * \r\n * @param {Info} info \r\n */\r\nexport async function addInfo(info){\r\n    return await fetch('/infos', {\r\n        method:'POST',\r\n        headers:{\r\n            \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(info)\r\n    }).then(x=>x.json())\r\n}\r\n\r\n\r\nexport async function listInfo(){\r\n    return await fetch('/infos').then(x=>x.json())\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport * as Info from \"./Infos.js\"\r\n\r\nimport {\r\n\tButton,\r\n\tNavbar,\r\n\tNav,\r\n\tCard,\r\n\tContainer,\r\n\tCardColumns,\r\n\tModal,\r\n  ListGroup,\r\n  Form,\r\n  FormControl\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst App = () => {\r\n\t// const [activeItem, setActive] = useState(\"book\");\r\n\tconst [infos, setInfos] = useState([]);\r\n\tconst [modalState, setModalState] = useState({\r\n\t\tshow: false,\r\n\t\tmodalType: \"\", //showInfo, addInfo\r\n\t\tdata: undefined,\r\n\t});\r\n\tconst handleClose = () => setModalState({ show: false });\r\n\tuseEffect(() => {\r\n\t\tfetch(\"/infos\")\r\n\t\t\t.then((x) => x.json())\r\n\t\t\t.then((x) => setInfos(x));\r\n\t}, []);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header/>\r\n\t\t\t<Container className=\"mt-5\">\r\n\t\t\t\t<ListCards\r\n\t\t\t\t\tinfos={infos}\r\n\t\t\t\t\tonClick={(info) => {\r\n\t\t\t\t\t\tsetModalState({ show: true, modalType: \"showInfo\", data: info });\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</Container>\r\n\t\t\t<MatchModals modalState={modalState} handleClose={handleClose} />\r\n\t\t\t<AddButton onClick={() => setModalState({ \r\n        show: true, modalType: \"addInfo\", onSubmit: (event)=>{sendAddInfo(event, setModalState)}\r\n      })}></AddButton>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default App;\r\n\r\n\r\nfunction Header(props){\r\n  return (\r\n    <Navbar bg=\"primary\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">LOGO</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"#book\">書</Nav.Link>\r\n        <Nav.Link href=\"#evnet\">活動</Nav.Link>\r\n        <Nav.Link href=\"#studio\">工作室</Nav.Link>\r\n        <Nav.Link href=\"#counselor\">諮商師</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nasync function sendAddInfo(event, setModalState){\r\n  event.preventDefault()\r\n  const newInfo = Object.fromEntries(Array.from(event.target.elements).filter(x=>x.id).map(x=>[x.id.split('.')[1], x.value]))\r\n  Info.addInfo(newInfo).then(x=>{\r\n    setModalState({show:false})\r\n  })\r\n  \r\n}\r\n\r\nfunction ListCards(props) {\r\n\tconst { infos, onClick } = props;\r\n\r\n\treturn (\r\n\t\t<CardColumns style={{fontSize: \"15px\"}}>\r\n\t\t\t{infos.map((info) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={info.id}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tonClick(info);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Card.Img\r\n\t\t\t\t\t\t\tvariant=\"top\"\r\n\t\t\t\t\t\t\tsrc=\"https://fakeimg.pl/350x200/ff0000/000\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t<Card.Title>{info.principal}</Card.Title>\r\n\t\t\t\t\t\t\t<Card.Text>{info.description}</Card.Text>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</CardColumns>\r\n\t);\r\n}\r\n\r\nfunction MatchModals(props) {\r\n\tconst { modalState, handleClose } = props;\r\n\tswitch (modalState.modalType) {\r\n\t\tcase \"showInfo\":\r\n\t\t\treturn <InfoModal info={modalState.data} handleClose={handleClose} />;\r\n\t\tcase \"addInfo\":\r\n      return <AddInfoModal handleClose={handleClose} onSubmit={modalState.onSubmit}/>\r\n      \r\n\t\tdefault:\r\n\t\t\treturn <></>;\r\n\t}\r\n}\r\n\r\nfunction InfoModal(props) {\r\n\tconst { info, handleClose } = props;\r\n\tconst { principal, description, location, link } = info;\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\tshow={true}\r\n\t\t\tonHide={handleClose}\r\n\t\t\tclassName=\"pb-5\"\r\n\t\t\tsize=\"lg\"\r\n\t\t\taria-labelledby=\"contained-modal-title-vcenter\"\r\n\t\t\tcentered\r\n\t\t>\r\n\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t<Modal.Title>{principal}</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<ListGroup variant=\"flush\">\r\n\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tclassName=\"w-100\"\r\n\t\t\t\t\t\t\tsrc=\"https://fakeimg.pl/350x200/ff0000/000\"\r\n\t\t\t\t\t\t\talt=\"\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t<ListGroup.Item>\r\n          <div className=\"form-inline\">\r\n              <label style={{marginRight: '10px',fontWeight:'bold'}}>敘述</label>\r\n              <div>{description}</div>\r\n          </div>\r\n            </ListGroup.Item>\r\n\t\t\t\t\t{location ? <ListGroup.Item>\r\n\r\n            <div className=\"form-inline\">\r\n              <label style={{marginRight: '10px',fontWeight:'bold'}}>地點</label>\r\n              <div>{location}</div>\r\n          </div>\r\n            \r\n\r\n            </ListGroup.Item> : <></>}\r\n\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t<a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t\t\t\t\t\t<Icon.Link45deg />\r\n\t\t\t\t\t\t\tlink\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t</ListGroup>\r\n\t\t\t</Modal.Body>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nfunction AddInfoModal(props) {\r\n  const { handleClose, onSubmit } = props;\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\tshow={true}\r\n\t\t\tonHide={handleClose}\r\n\t\t\tclassName=\"pb-5\"\r\n\t\t\tsize=\"lg\" \r\n\t\t\taria-labelledby=\"contained-modal-title-vcenter\"\r\n\t\t\tcentered\r\n\t\t>\r\n\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t<Modal.Title>新增活動</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<Form onSubmit={onSubmit}>\r\n\t\t\t\t\t<Form.Group controlId=\"newInfo.principal\">\r\n\t\t\t\t\t\t<Form.Label>主辦人/單位</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type=\"text\" placeholder=\"書名/活動名稱/諮商師/工作訪\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group controlId=\"newInfo.type\">\r\n\t\t\t\t\t\t<Form.Label>類型</Form.Label>\r\n\t\t\t\t\t\t<Form.Control as=\"select\">\r\n\t\t\t\t\t\t\t<option value=\"book\">書</option>\r\n\t\t\t\t\t\t\t<option value=\"event\">活動</option>\r\n\t\t\t\t\t\t\t<option value=\"studio\">工作室</option>\r\n\t\t\t\t\t\t\t<option value=\"counselor\">諮商師</option>\r\n\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t</Form.Group>\r\n          <Form.Group controlId=\"newInfo.link\">\r\n\t\t\t\t\t\t<Form.Label>連結網址</Form.Label>\r\n\t\t\t\t\t\t<Form.Control type=\"text\" placeholder=\"https://example.com.tw\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group controlId=\"newInfo.description\">\r\n\t\t\t\t\t\t<Form.Label>敘述</Form.Label>\r\n\t\t\t\t\t\t<Form.Control as=\"textarea\" rows=\"3\" />\r\n\t\t\t\t\t</Form.Group>\r\n          <div className=\"d-flex\">\r\n          <Button variant=\"primary\" type=\"submit\" className=\"mx-auto\">\r\n            Submit\r\n          </Button>\r\n          </div>\r\n          \r\n\t\t\t\t</Form>\r\n\t\t\t</Modal.Body>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nfunction AddButton(props) {\r\n\tconst { onClick } = props;\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tonClick={onClick}\r\n\t\t\tclassName=\"shadow\"\r\n\t\t\tstyle={{\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tright: \"20px\",\r\n\t\t\t\tbottom: \"20px\",\r\n\t\t\t\tdisplay: \"grid\",\r\n\t\t\t\tplaceItems: \"center\",\r\n\t\t\t\twidth: \"50px\",\r\n\t\t\t\theight: \"50px\",\r\n\t\t\t\tborderRadius: \"50%\",\r\n\t\t\t\tpadding: \"1px 0px 0px 1px\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Icon.Plus size={30} />\r\n\t\t</Button>\r\n\t);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}